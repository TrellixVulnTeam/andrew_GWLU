"""
Sit back and enjoy your problems
You don't always have to solve them
Yeah you might as well accept it
Don't you waste your time regretting
So enjoy your life (c) MARINA
"""

m = [
  [  5,  6,  5,  5,  9,  5,  5,  5,  5,  5,  6, 13,  7, 11, 11,  5,  5,  5, 10, 10,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2],
  [  5,  4, 14, 14,  4,  1,  5,  9,  9,  9, 13,  9, 13,  4,  2, 11, 11, 10,  3,  9, 14,  8, 12,  1,  3,  4,  4,  3,  2,  5],
  [  5,  3, 14,  4, 19, 18,  9,  1,  2,  9,  8, 13, 13, 13,  1,  1,  1,  1,  3, 10,  2,  3, 11, 11, 14,  1,  7,  6,  3,  5],
  [  5,  1, 14, 19, 19, 19, 19, 19, 19, 10, 15,  7, 15,  1,  1,  1,  1,  1, 18,  1, 14, 16,  4, 11,  1,  6,  1,  4,  5,  5],
  [  8, 19, 19,  3, 19, 13, 12, 17, 10, 10,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15,  9, 11,  5, 12,  1,  8,  4,  7,  5],
  [  5,  3, 15, 13, 18,  6, 15,  8, 15, 13,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 11, 11, 11, 11, 12,  3,  7,  7,  5],
  [  5, 10, 12, 16, 18, 15, 15, 13,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  1,  1,  3,  8,  7,  6,  3,  2,  6],
  [  6, 15,  7, 15,  9, 13, 18,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  5,  1,  9, 13,  1,  6,  9,  5],
  [  5, 15,  3, 11,  7, 15,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  1,  7,  1,  1,  3,  5],
  [ 10, 14, 18, 18,  7, 14,  1,  1,  1,  1,  1,  1,  7,  8,  8,  5,  7,  7,  6,  1,  1,  1,  1,  1,  1,  1, 11, 16,  6,  5],
  [  5, 15,  7, 18, 15,  1,  1,  1,  1,  1,  1,  1,  5,  5,  1,  2,  9,  7,  4,  1,  1,  1,  1,  1,  1,  1,  1,  5,  6,  5],
  [  5, 15, 15,  6, 19,  1,  1,  1,  1,  1,  6,  7,  9,  1,  8,  1,  4,  1,  4,  5,  7,  1,  1,  1,  1,  1,  1,  1,  3,  5],
  [  5, 19, 10,  1,  1,  1,  1,  1,  1,  7,  6,  2,  4,  7,  3,  1,  1,  4,  6,  1,  8,  2,  1,  1,  1,  1,  1,  6,  1,  5],
  [ 19,  2,  1,  1,  1,  1,  1,  1,  8,  4,  2,  2,  1,  5,  5,  3,  1,  7,  4,  8,  5,  5,  1,  1,  1,  1,  1,  1,  1,  5],
  [ 19,  1,  1,  1,  1,  1,  1,  1,  1,  9,  3,  3,  2,  9,  9,  9,  1,  1,  7,  9,  1,  5,  1,  1,  1,  1,  1, 14,  1,  5],
  [  5,  1,  1,  1,  1,  1,  1,  1,  4,  3,  9,  3,  5,  5,  1,  3,  1,  8,  3,  5,  3,  1,  1,  1,  1,  1,  1, 11,  1,  6],
  [  5,  1,  1,  1,  1,  1,  1,  1,  1,  4,  4,  1,  5,  5,  7,  5,  2,  1,  5,  4,  5,  6,  1,  1,  1,  1,  1,  1,  1,  6],
  [  8,  8,  1,  1,  1,  1,  1,  1,  9,  3,  6,  3,  5,  5,  2,  8,  3,  6,  3,  4,  1,  6,  1,  1,  1,  1,  1,  8,  4,  5],
  [  9, 14,  6,  1,  1,  1,  1,  1,  1,  2,  7,  1,  3,  2,  7,  5,  4,  8,  3,  1,  2,  3,  1,  1,  1,  1,  1, 10,  4,  6],
  [  5, 18, 11,  1,  1,  1,  1,  1,  3,  4,  8,  7,  5,  1,  1,  1,  2,  3,  9,  4,  1,  1,  1,  1,  1,  1,  3,  5,  7,  6],
  [ 13, 18,  5, 10,  1,  1,  1,  1,  1,  6,  2,  6,  5,  4,  6,  3,  5,  3,  4,  2,  1,  1,  1,  1,  1,  1, 13,  3,  1,  7],
  [  5, 10, 18,  7,  1,  1,  1,  1,  1,  1,  3,  2,  8,  3,  9,  6,  2,  3,  5,  5,  1,  1,  1,  1,  1,  3, 11,  6,  5,  5],
  [ 12, 11, 17,  7, 11,  1,  1,  1,  1,  1,  4,  1,  7,  2,  6,  5,  5,  1,  1,  1,  1,  1,  1,  1,  1,  9,  4,  1,  3,  5],
  [ 15,  3,  6,  4,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 10,  7,  7,  9,  7,  7,  5],
  [ 12, 19, 12, 11, 14,  5,  7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  7,  1,  7,  7,  7,  7],
  [ 16, 11,  7,  2, 16,  4,  4,  1, 10,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 13,  5,  4,  7, 10,  1,  6,  7,  7],
  [  5, 16,  7, 16, 13,  1,  8,  9,  6,  8, 12, 16,  1,  1,  1,  1,  1,  1,  1,  1,  8,  9,  5,  8, 11,  6,  8,  1,  2,  5],
  [ 18, 14, 17,  1,  3,  8, 10,  8, 10,  3,  5, 12,  1,  1,  1,  1,  1,  1,  1,  5,  6,  4,  9,  9,  2,  8,  8,  8,  8,  7],
  [ 12,  5,  1,  3,  7,  6,  3,  4, 16,  6,  9,  5,  7, 13, 13,  6,  7,  6,  7,  1,  6, 10,  2, 10,  3,  8,  4,  2,  7,  6],
  [ 16, 19,  5,  9, 14, 11,  7,  5, 10,  6, 10,  5,  8, 14,  7,  5, 10,  7, 10,  6,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5]
    ]


def trap_rain_water(height_map: list[list[int]]) -> int:

    if len(height_map) < 3:
        return 0
    if len(height_map[0]) < 3:
        return 0

    mm = max([max(r) for r in height_map])
    water = [[mm - h for h in row]
             for row in height_map]

    hlen = len(water)

    # drop borders
    for idr, r in enumerate(water):
        rlen = len(r)
        for idx, x in enumerate(r):
            if idr in [0, hlen-1] \
            or idx in [0, rlen-1]:
                water[idr][idx] = 0

    prev = mm * hlen * rlen
    while sum([sum(r) for r in water]) < prev:
        print(prev)
        prev = sum([sum(r) for r in water])
        for idr, r in enumerate(water):
            for idx, x in enumerate(r):
                if idr in [0, hlen-1] \
                or idx in [0, rlen-1]:
                    continue

                def get_neighbours(m, a, b):
                    L = m[a][b - 1]
                    R = m[a][b + 1]
                    U = m[a - 1][b]
                    D = m[a + 1][b]
                    return {"L": L, "R": R, "U": U, "D": D}

                neighbours = get_neighbours(height_map, idr, idx)
                weighbours = get_neighbours(water, idr, idx)
                total = x + height_map[idr][idx]

                for s in "LRUD":
                    t = neighbours[s] + weighbours[s]
                    if t < total:
                        dt = min(total - t, water[idr][idx])
                        total -= dt
                        water[idr][idx] -= dt

    """
    print("m = [  ")
    for r in height_map:
        print("  [", end='')
        for a in r:
            print(f"{a:>3},", end='')
        print()
    print()
    print("w = [  ")
    for r in water:
        print("  [", end='')
        for a in r:
            print(f"{a:>3},", end='')
        print()
    """

    return sum([sum(r) for r in water])


import pytest
@pytest.mark.parametrize(
  ("m", "expected"),
  (
    ([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]], 4),
    ([[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]], 10),
    (m, 1804),
  )
)
def test_answer(m, expected):
    assert trap_rain_water(m) == expected
